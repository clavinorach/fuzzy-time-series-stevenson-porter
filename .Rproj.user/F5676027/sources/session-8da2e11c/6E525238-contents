# ---

# Prediksi Suhu Rata-Rata Harian di Kabupaten Kolaka Menggunakan Metode Fuzzy Time Series Stevenson Porter: Analisis Data BMKG Tahun 2001 hingga 2024 di Provinsi Sulawesi Tenggarara.

# ---

#### Import Data

```{r}
data_asli <- read.csv("avg_temp_sulteng.csv", header = TRUE, sep = ",")
install.packages("zoo") #cleaning data
head(data_asli)
```

### Cleaning Data

```{r}
library(zoo)
data_asli <- read.csv("avg_temp_sulteng.csv", header = TRUE, sep = ",")
data_asli$date <- as.Date(data_asli$date, format = "%d-%m-%Y")
data_asli$tavg <- na.locf(data_asli$tavg)  # Mengisi NA dengan nilai sebelumnya
n <- length(data_asli$tavg)
```

### Plot Data Aktual

```{r}
library(ggplot2)
library(dplyr)
library(lubridate)
library(zoo)

# Membaca data dari file CSV
data_asli <- read.csv("avg_temp_sulteng.csv", header = TRUE, sep = ",")

# Ensure the date column is of Date type
datauji$date <- as.Date(datauji$date, format = "%d-%m-%Y")

# Aggregate data by month for better readability
monthly_data <- datauji %>%
  mutate(month = floor_date(date, "month")) %>%
  group_by(month) %>%
  summarize(monthly_avg_temp = mean(tavg, na.rm = TRUE))

# Mengisi NA dengan nilai sebelumnya
data_asli$tavg <- na.locf(data_asli$tavg)


# Plot the time series data using ggplot2
ggplot(monthly_data, aes(x = month, y = monthly_avg_temp)) +
  geom_line(color = 'blue') +
  geom_smooth(method = "loess", span = 0.2, color = 'red', se = FALSE) +  # Add a smoother
  labs(title = "Time Series Plot of Average Monthly Temperature\nin Kolaka Regency Southeast Sulawesi from 2001-2024",
       x = "Period",
       y = "Average Temperature (°C)") +
  theme_minimal() +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Set x-axis breaks every year
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for better readability
    plot.title = element_text(size = 14, hjust = 0.5, margin = margin(t = 20, b = 20))  # Adjust the margin of the title
  )
```

### Perubahan Data

```{r}
dt= NULL
for (i in 1:n-1){
  dt[i]=((data_asli$tavg[i+1]-data_asli$tavg[i])/data_asli$tavg[i])*100
}
head(dt)
data = dt
```

```         
```

### Menentukan himpunan semesta U

```{r}
Umin = floor(min(data))
Umax = ceiling(max(data))
Umin
Umax

```

### Menentukan interval data

```{r}
n_intervals = round(1 + 3.322 * logb(length(data), base = 10)) # banyaknya kelas interval
interval_length = (Umax - Umin) / n_intervals # panjang interval

# Membuat interval
intervals <- data.frame(mins = numeric(n_intervals), maxs = numeric(n_intervals))
for (i in 1:n_intervals) {
  intervals[i, 1] = Umin + (i - 1) * interval_length
  intervals[i, 2] = Umin + i * interval_length
}
intervals

# Menambahkan sedikit margin ke interval terakhir
intervals[n_intervals, 2] <- intervals[n_intervals, 2] + 0.01

```

### Fuzzifikasi

```{r}
m = as.vector(rowMeans(intervals))
fuzifikasi=c() 
for (i in 1:length(data)){
  for (j in 1:nrow(intervals)){
    if (i!=which.max(data)){
      if (data[i]>=(intervals[j,1])&data[i]<(intervals[j,2])){
        fuzifikasi[i]=j
        break
      }
    }
    else {
      if (data[i]>=(intervals[j,1])&data[i]<=(intervals[j,2])){
        fuzifikasi[i]=j
        break
      }
    }
  }
}
fuzifikasi
```

### Mencari nilai FLR & FLRG

```{r}
flr <- data.frame(current_state=0, next_state=0)
for(i in 1: length(fuzifikasi)){
  if(i < length(fuzifikasi)){
    flr[i,]=c(fuzifikasi[i],fuzifikasi[i+1])
  }
  else{
    flr[i,]=c(fuzifikasi[i],0)
  }
}
flr
flrg = list()
for (i in 1:nrow(intervals)){
  flrgi=c()
  for (j in 1:(length(data)-1)){
    if (flr[j,1]==i){
      flrgi = c(flrgi,flr[j,2])
    }
  }
  flrg[[i]] = flrgi
}
flrg

# Menghitung dan mencetak hasil FLRG rata-rata
flrg_avg <- numeric(nrow(intervals))
for (i in 1:length(flrg)) {
  if (length(flrg[[i]]) > 0) {
    flrg_avg[i] <- mean(flrg[[i]], na.rm = TRUE)
  } else {
    flrg_avg[i] <- NA
  }
}

# Menampilkan hasil FLRG
print(flrg)

# Menampilkan hasil FLRG rata-rata
print(flrg_avg)
```

### Mencari anggota dan frekuensi

```{r}
anggota = list()
for (i in 1:nrow(intervals)){
  y = flrg[[i]]
  r = unique(y)
  anggota[[i]] = r
}
anggota
frek <- data.frame(current_state=0)
for (i in 1:length(flrg)){
  frek[i,]=length(flrg[[i]])
}
frek
```

### Mencari peringkat fuzzy

```{r}
peringkat=rank(frek,ties.method = "first")
fuzz = c(1:length(peringkat))
sub_l = 1/peringkat
peringkat1=data.frame(fuzz,peringkat,sub_l)
peringkat1
```

### Menentukan kelas sub interval atau kelas cacah

```{r}
sub_l = interval_length / peringkat

s_interval = data.frame(min=0, max=0)
sub_int = function(q) {
  n = peringkat[q]
  s_interval[1,1] = intervals[q,1]
  s_interval[1,2] = intervals[q,1] + sub_l[q]
  if (n > 1) {
    for (i in 2:n) {
      s_interval[i,1] = s_interval[i-1,2]
      s_interval[i,2] = s_interval[i,1] + sub_l[q]
    }
  }
  return(s_interval)
}

urutan = order(peringkat1$peringkat) # Mengurutkan panjang interval dari yang terbesar

# Fungsi untuk menyusun sub interval berdasarkan panjang interval
sub_int = function(q) {
  n = peringkat[q]
  s_interval[1,1] = intervals[q,1]
  s_interval[1,2] = intervals[q,1] + sub_l[q]
  if (n > 1) {
    for (i in 2:n) {
      s_interval[i,1] = s_interval[i-1,2]
      s_interval[i,2] = s_interval[i,1] + sub_l[q]
    }
  }
  return(s_interval)
}

# Menyusun sub interval berdasarkan panjang interval sekaligus akan menjadi dasar fuzzifikasi yang baru
s = data.frame(min = 0, max = 0)
new = rbind(s)
i = 0
repeat {
  i = i + 1
  n = urutan[i]
  new = rbind(new, sub_int(n))
  if (i >= length(urutan)) {
    break()
  }
}
new = new[-1,]
new
```

### Menentukan fuzzifikasi kelas cacah atau interval data

```{r}
m2 = as.vector(rowMeans(new))
fuzifikasi2=c() 
for (i in 1:length(data)){
  for (j in 1:nrow(new)){
    if (i!=which.max(data)){
      if (data[i]>=(new[j,1])&data[i]<(new[j,2])){
        fuzifikasi2[i]=j
        break
      }
    }
    else {
      if (data[i]>=(new[j,1])&data[i]<=(new[j,2])){
        fuzifikasi2[i]=j
        break
      }
    }
  }
}
fuzifikasi2
```

### Ramalan & Prediksi Data

```{r}
#===============================#
#Ramalan dan Prediksi
#===============================#
#menentukan hasil ramalan
hasil = data.frame(0)
for (i in 1:nrow(new)){
  if (i == 1)
    hasil[i]=(1.5)/((1/m2[i])+(0.5/m2[i+1]))else
  if (i == nrow(new))
    hasil[i]=(1.5)/((0.5/m2[i-1])+(1/m2[i]))
  else
    hasil[i]=(2)/((0.5/m2[i-1])+(1/m2[i])+(0.5/m2[i+1]))
}
as.data.frame(hasil)

#menentukan hasil prediksi
prediksi=NULL
for (i in 1:length(fuzifikasi2)){
  for (j in 1:length(hasil)){
    if (fuzifikasi2[i]==j){
      prediksi[i]=hasil[[j]]
    }
  }
}
prediksi
```

### Tabel pembanding nilai aktual dengan nilai prediksi

```{r}
# Pastikan 'prediksi' adalah numerik
prediksi <- as.numeric(prediksi)

# Mengembalikan pada skala aslinya
t <- numeric(length(data_asli$tavg) - 1)  # Inisialisasi 't' dengan panjang n-1
for (i in 2:length(data_asli$tavg)) {
  t[i - 1] <- data_asli$tavg[i - 1] + (data_asli$tavg[i - 1] * prediksi[i - 1] / 100)
}

# Hapus nilai pertama dari 'data_asli$tavg' untuk perbandingan
datapakai <- data_asli$tavg[-1]

# Pastikan 't' dan 'datapakai' adalah numerik
t <- as.numeric(t)
datapakai <- as.numeric(datapakai)

# Hitung galat (error)
galat <- abs(t - datapakai)

# Buat tabel pembanding
tabel <- data.frame(datapakai = datapakai, t = t, galat = galat)
tabel
```

```         
```

### Uji ketepatan data

```{r}
#Uji ketepatan
MSE = mean(galat^2, na.rm = TRUE)
MAE = mean(abs(galat), na.rm = TRUE)
MAPE = mean(abs(galat/datapakai*100), na.rm=TRUE)
ketepatan = cbind(MSE,MAE,MAPE)
ketepatan
```

### Visualisasi nilai data aktual dengan prediksi

```{r}
### Visualisasi nilai data aktual dengan prediksi
{r}
library(dplyr)
library(lubridate)
library(ggplot2)

# Pastikan datauji dan tabel sudah ada dalam lingkungan kerja
datauji <- read.csv("avg_temp_sulteng.csv", header = TRUE, sep = ",")
datauji$date <- as.Date(datauji$date, format = "%d-%m-%Y")

# Menghitung nilai rata-rata bulanan untuk data aktual
datauji_excluded <- datauji[-1,] # Mengeluarkan baris pertama jika tidak diperlukan
datauji_excluded$date <- as.Date(datauji_excluded$date, format = "%Y-%m-%d")
monthly_data_actual <- datauji_excluded %>%
  mutate(month = floor_date(date, "month")) %>%
  group_by(month) %>%
  summarize(monthly_avg_temp = mean(tavg, na.rm = TRUE))

# Membuat tabel prediksi dari hasil prediksi sebelumnya
tabel_prediksi <- data.frame(tanggal = datauji$date[-1], adj.forecast2 = t)

# Menghitung nilai rata-rata bulanan untuk data prediksi
monthly_data_predicted <- tabel_prediksi %>%
  mutate(month = floor_date(tanggal, "month")) %>%
  group_by(month) %>%
  summarize(monthly_avg_temp = mean(adj.forecast2, na.rm = TRUE))

# Menggabungkan data aktual dan prediksi
combined_data <- bind_rows(
  monthly_data_actual %>% mutate(type = "Actual"),
  monthly_data_predicted %>% mutate(type = "Predicted")
)

# Plot data time series menggunakan ggplot2
ggplot(combined_data, aes(x = month, y = monthly_avg_temp, color = type)) +
  geom_line(aes(linetype = type)) +
  scale_color_manual(values = c("Actual" = "blue", "Predicted" = "orange")) +
  labs(title = "Time Series Plot of Average Monthly Temperature",
       x = "Period",
       y = "Average Temperature (°C)",
       color = "Type") +
  theme_minimal() +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y") +  # Set x-axis breaks every year
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axi


```

### Prediksi suhu rata-rata selama 7 hari kedepan dari dataset

```{r}
# Baca data dari CSV
data_asli <- read.csv("avg_temp_sulteng.csv", header = TRUE, sep = ",")

# Konversi kolom tanggal menjadi tipe Date
data_asli$date <- as.Date(data_asli$date, format = "%d-%m-%Y")

# Mengembalikan pada skala aslinya
t <- numeric(length(data_asli$tavg))
for (i in 2:length(data_asli$tavg)){
  t[i] <- data_asli$tavg[i-1] + (data_asli$tavg[i-1] * prediksi[i-1] / 100)
}

# Menghitung rata-rata perubahan terakhir
last_few_points <- tail(data_asli$tavg, 5)
average_change <- mean(diff(last_few_points), na.rm = TRUE)

# Mengambil tanggal terakhir dari data asli
last_date <- max(data_asli$date)

# Membuat vektor tanggal untuk prediksi 7 hari ke depan
prediksi_dates <- seq(from = last_date + 1, by = "day", length.out = 7)

# Menghasilkan prediksi 7 hari ke depan berdasarkan rata-rata perubahan
prediksi_7_hari <- numeric(7)
for (i in 1:7) {
  if (i == 1) {
    prediksi_7_hari[i] <- last_few_points[length(last_few_points)] + average_change
  } else {
    prediksi_7_hari[i] <- prediksi_7_hari[i - 1] + average_change
  }
}
predicted_7_days <- prediksi_7_hari

# Mengembalikan prediksi pada skala aslinya
predicted_t <- numeric(7)
predicted_t[1] <- t[length(t)] + (t[length(t)] * predicted_7_days[1] / 100)
for (i in 2:7) {
  predicted_t[i] <- predicted_t[i - 1] + (predicted_t[i - 1] * predicted_7_days[i] / 100)
}


# Append the predicted values to 't'
t <- c(t, predicted_7_days)

# Ensure 'datapakai' and 't' have the same length after the prediction
datapakai <- c(data_asli$tavg[-1], rep(NA, 10))


# Ensure 'datapakai' and 't' have the same length
if (length(datapakai) < length(t)) {
  datapakai <- c(datapakai, rep(NA, length(t) - length(datapakai)))
} else if (length(datapakai) > length(t)) {
  t <- c(t, rep(NA, length(datapakai) - length(t)))
}

# Creating the table with the new predictions
tabel_final <- data.frame(datapakai = datapakai, t = t)

# Set the values to NA for the newly predicted periods in the final table
tabel_final$datapakai[(nrow(tabel_final)-6):nrow(tabel_final)] <- NA

# Print the final table
tail(tabel_final, 20)
```
