library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(zoo)
library(DT)
library(shinythemes)

# Define the UI
ui <- fluidPage(
  theme = shinytheme("slate"),  # Apply a theme
  tags$head(
    tags$style(HTML("
      .dataTables_wrapper {
        color: #E3E3E3;
      }
      table.dataTable thead th {
        color: #E3E3E3;
      }
      table.dataTable tbody tr {
        color: #E3E3E3;
      }
      table.dataTable tfoot th {
        color: #E3E3E3;
      }
    "))
  ),
  titlePanel("Fuzzy Time Series Stevenson Porter Model"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Choose CSV File",
                accept = c("text/csv", 
                           "text/comma-separated-values,text/plain", 
                           ".csv")),
      tags$hr(),
      numericInput("period", "Prediction Period (days):", min = 1, max = 30, value = 7),
      selectInput("model", "Select Model:", choices = c("Stevenson Porter", "Markov Chain"))
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Plot", plotOutput("plot")),
        tabPanel("Prediction", DT::dataTableOutput("prediction_table")),
        tabPanel("Accuracy", tableOutput("accuracy")),
        tabPanel("Comparison Plot", plotOutput("comparison_plot"))
      )
    )
  )
)

# Define the server logic
server <- function(input, output) {
  data_reactive <- reactive({
    req(input$file)
    data <- read.csv(input$file$datapath, header = TRUE, sep = ",")
    data$date <- as.Date(data$date, format = "%d-%m-%Y")
    data$tavg <- na.locf(data$tavg)
    data
  })
  
  monthly_data <- reactive({
    data <- data_reactive()
    data %>%
      mutate(month = floor_date(date, "month")) %>%
      group_by(month) %>%
      summarize(monthly_avg_temp = mean(tavg, na.rm = TRUE))
  })
  
  output$plot <- renderPlot({
    data <- monthly_data()
    ggplot(data, aes(x = month, y = monthly_avg_temp)) +
      geom_line(color = 'blue') +
      geom_smooth(method = "loess", span = 0.3, color = 'red', se = FALSE) +
      labs(title = "Time Series Plot of Average Monthly Temperature\nin Kolaka Regency Southeast Sulawesi from 2001-2024",
           x = "Period",
           y = "Average Temperature (Â°C)") +
      theme_minimal() +
      scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(size = 14, hjust = 0.5, margin = margin(t = 20, b = 20))
      )
  })
  
  intervals <- reactive({
    data <- data_reactive()
    n <- length(data$tavg)
    
    dt <- numeric(n-1)
    for (i in 1:(n-1)){
      dt[i] <- ((data$tavg[i+1] - data$tavg[i]) / data$tavg[i]) * 100
    }
    
    Umin <- floor(min(dt))
    Umax <- ceiling(max(dt))
    
    n_intervals <- round(1 + 3.322 * log10(length(dt)))
    interval_length <- (Umax - Umin) / n_intervals
    
    intervals <- data.frame(mins = numeric(n_intervals), maxs = numeric(n_intervals))
    for (i in 1:n_intervals) {
      intervals[i, 1] <- Umin + (i - 1) * interval_length
      intervals[i, 2] <- Umin + i * interval_length
    }
    intervals[n_intervals, 2] <- intervals[n_intervals, 2] + 0.01
    
    intervals
  })
  
  fuzifikasi <- reactive({
    data <- data_reactive()
    intervals <- intervals()
    n <- length(data$tavg)
    
    dt <- numeric(n-1)
    for (i in 1:(n-1)){
      dt[i] <- ((data$tavg[i+1] - data$tavg[i]) / data$tavg[i]) * 100
    }
    
    fuzifikasi <- numeric(n-1)
    for (i in 1:(n-1)){
      for (j in 1:nrow(intervals)){
        if (i != which.max(dt)){
          if (dt[i] >= intervals[j, 1] & dt[i] < intervals[j, 2]){
            fuzifikasi[i] <- j
            break
          }
        } else {
          if (dt[i] >= intervals[j, 1] & dt[i] <= intervals[j, 2]){
            fuzifikasi[i] <- j
            break
          }
        }
      }
    }
    
    fuzifikasi
  })
  
  flrg <- reactive({
    fuzifikasi <- fuzifikasi()
    intervals <- intervals()
    n <- length(fuzifikasi)
    
    flr <- data.frame(current_state = 0, next_state = 0)
    for (i in 1:n){
      if (i < n){
        flr[i,] <- c(fuzifikasi[i], fuzifikasi[i+1])
      } else {
        flr[i,] <- c(fuzifikasi[i], 0)
      }
    }
    
    flrg <- list()
    for (i in 1:nrow(intervals)){
      flrgi <- c()
      for (j in 1:(n-1)){
        if (flr[j,1] == i){
          flrgi <- c(flrgi, flr[j,2])
        }
      }
      flrg[[i]] <- flrgi
    }
    
    flrg
  })
  
  flrg_avg <- reactive({
    flrg <- flrg()
    intervals <- intervals()
    n <- nrow(intervals)
    
    flrg_avg <- numeric(n)
    for (i in 1:length(flrg)) {
      if (length(flrg[[i]]) > 0) {
        flrg_avg[i] <- mean(flrg[[i]], na.rm = TRUE)
      } else {
        flrg_avg[i] <- NA
      }
    }
    
    flrg_avg
  })
  
  prediction <- reactive({
    if (input$model == "Stevenson Porter") {
      flrg_avg <- flrg_avg()
      intervals <- intervals()
      m <- as.vector(rowMeans(intervals))
      
      hasil <- numeric(length(m))
      for (i in 1:length(m)){
        if (i == 1)
          hasil[i] <- (1.5) / ((1 / m[i]) + (0.5 / m[i+1]))
        else if (i == length(m))
          hasil[i] <- (1.5) / ((0.5 / m[i-1]) + (1 / m[i]))
        else
          hasil[i] <- (2) / ((0.5 / m[i-1]) + (1 / m[i]) + (0.5 / m[i+1]))
      }
      
      prediksi <- numeric(length(fuzifikasi()))
      for (i in 1:length(fuzifikasi())){
        for (j in 1:length(hasil)){
          if (fuzifikasi()[i] == j){
            prediksi[i] <- hasil[j]
          }
        }
      }
      
      # Mengembalikan prediksi pada skala asli
      data <- data_reactive()
      t <- numeric(length(data$tavg) - 1)  # Inisialisasi 't' dengan panjang n-1
      for (i in 2:length(data$tavg)) {
        t[i - 1] <- data$tavg[i - 1] + (data$tavg[i - 1] * prediksi[i - 1] / 100)
      }
      t  # Kembalikan hasil prediksi
      
    } else {
      # Markov Chain model logic
      datauji <- data_reactive()
      data <- datauji$tavg
      n <- length(data)
      states <- unique(data)
      n_states <- length(states)
      
      trans_matrix <- matrix(0, nrow = n_states, ncol = n_states)
      
      for (i in 1:(nrow(datauji) - 1)) {
        current_state <- which(states == data[i])
        next_state <- which(states == data[i + 1])
        trans_matrix[current_state, next_state] <- trans_matrix[current_state, next_state] + 1
      }
      
      trans_matrix <- trans_matrix / rowSums(trans_matrix)
      
      current_state <- which(states == data[n])
      predictions <- numeric(input$period)
      
      for (i in 1:input$period) {
        next_state <- which.max(trans_matrix[current_state, ])
        predictions[i] <- states[next_state]
        current_state <- next_state
      }
      
      predictions
    }
  })
  
  output$prediction_table <- DT::renderDataTable({
    prediksi <- prediction()
    data <- data_reactive()
    
    if (input$model == "Stevenson Porter") {
      t <- prediksi
      
      datapakai <- data$tavg[-1]
      galat <- abs(t - datapakai)
      
      prediction_dates <- seq(min(data$date) + 1, by = "day", length.out = length(t))
      tabel <- data.frame(Date = format(prediction_dates, "%d-%m-%Y"), Actual = datapakai, Predicted = t, Error = galat)
      
      # Add 7-day future predictions
      last_date <- max(data$date)
      future_dates <- seq(last_date + 1, by = "day", length.out = input$period)
      future_predictions <- rep(NA, input$period)
      
      future_t <- numeric(input$period)
      for (i in 1:input$period) {
        if (i == 1) {
          future_t[i] <- t[length(t)] + (t[length(t)] * prediksi[i] / 100)
        } else {
          future_t[i] <- future_t[i - 1] + (future_t[i - 1] * prediksi[i] / 100)
        }
      }
      
      future_table <- data.frame(Date = format(future_dates, "%d-%m-%Y"), Actual = future_predictions, Predicted = future_t, Error = rep(NA, input$period))
      final_table <- rbind(tabel, future_table)
      
      datatable(final_table, options = list(pageLength = 10, autoWidth = TRUE))
    } else {
      prediction_dates <- seq(min(data$date) + 1, by = "day", length.out = length(prediksi))
      tabel <- data.frame(Date = format(prediction_dates, "%d-%m-%Y"), Predicted = prediksi)
      
      # Add 7-day future predictions
      last_date <- max(data$date)
      future_dates <- seq(last_date + 1, by = "day", length.out = input$period)
      future_predictions <- prediction()
      
      future_table <- data.frame(Date = format(future_dates, "%d-%m-%Y"), Predicted = future_predictions)
      final_table <- rbind(tabel, future_table)
      
      datatable(final_table, options = list(pageLength = 10, autoWidth = TRUE))
    }
  })
  
  output$accuracy <- renderTable({
    prediksi <- prediction()
    data <- data_reactive()
    
    if (input$model == "Stevenson Porter") {
      t <- prediksi
      datapakai <- data$tavg[-1]
      galat <- abs(t - datapakai)
      
      MSE <- mean(galat^2, na.rm = TRUE)
      MAE <- mean(abs(galat), na.rm = TRUE)
      MAPE <- mean(abs(galat / datapakai * 100), na.rm = TRUE)
      
      ketepatan <- data.frame(MSE = MSE, MAE = MAE, MAPE = MAPE)
      ketepatan
    } else {
      ketepatan <- data.frame(MSE = NA, MAE = NA, MAPE = NA)
      ketepatan
    }
  })
  
  output$comparison_plot <- renderPlot({
    prediksi <- prediction()
    data <- data_reactive()
    
    if (input$model == "Stevenson Porter") {
      t <- prediksi
      
      last_few_points <- tail(data$tavg, 5)
      average_change <- mean(diff(last_few_points), na.rm = TRUE)
      
      first_date <- min(data$date)
      
      prediksi_dates <- seq(from = first_date + 1, by = "day", length.out = input$period)
      
      prediksi_7_hari <- numeric(input$period)
      for (i in 1:input$period) {
        if (i == 1) {
          prediksi_7_hari[i] <- last_few_points[length(last_few_points)] + average_change
        } else {
          prediksi_7_hari[i] <- prediksi_7_hari[i - 1] + average_change
        }
      }
      predicted_7_days <- prediksi_7_hari
      
      predicted_t <- numeric(input$period)
      predicted_t[1] <- t[length(t)] + (t[length(t)] * predicted_7_days[1] / 100)
      for (i in 2:input$period) {
        predicted_t[i] <- predicted_t[i - 1] + (predicted_t[i - 1] * predicted_7_days[i] / 100)
      }
      
      t <- c(t, predicted_7_days)
      
      datapakai <- c(data$tavg[-1], rep(NA, input$period))  # Adjust the length to match the predicted data
      
      # Ensure both vectors are of the same length
      if (length(datapakai) < length(t)) {
        datapakai <- c(datapakai, rep(NA, length(t) - length(datapakai)))
      } else if (length(datapakai) > length(t)) {
        t <- c(t, rep(NA, length(datapakai) - length(t)))
      }
      
      tabel_final <- data.frame(datapakai = datapakai, t = t)
      
      datauji <- data
      datauji$date <- as.Date(datauji$date, format = "%d-%m-%Y")
      
      datauji_excluded <- datauji[-1, ]
      datauji_excluded$date <- as.Date(datauji_excluded$date, format = "%Y-%m-%d")
      
      monthly_data_actual <- datauji_excluded %>%
        mutate(month = floor_date(date, "month")) %>%
        group_by(month) %>%
        summarize(monthly_avg_temp = mean(tavg, na.rm = TRUE))
      
      tabel_prediksi <- data.frame(tanggal = c(datauji$date[-1], prediksi_dates), adj.forecast2 = t)
      
      monthly_data_predicted <- tabel_prediksi %>%
        mutate(month = floor_date(tanggal, "month")) %>%
        group_by(month) %>%
        summarize(monthly_avg_temp = mean(adj.forecast2, na.rm = TRUE))
      
      combined_data <- bind_rows(
        monthly_data_actual %>% mutate(type = "Actual"),
        monthly_data_predicted %>% mutate(type = "Predicted")
      )
      
      ggplot(combined_data, aes(x = month, y = monthly_avg_temp, color = type)) +
        geom_line(aes(linetype = type)) +
        scale_color_manual(values = c("Actual" = "blue", "Predicted" = "orange")) +
        labs(title = "Time Series Plot of Average Monthly Temperature",
             x = "Period",
             y = "Average Temperature (Â°C)",
             color = "Type") +
        theme_minimal() +
        scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))
    }
  })
}


# Run the application 
shinyApp(ui = ui, server = server)
