"0","sub_l = interval_length / peringkat"
"0",""
"0","s_interval = data.frame(min=0, max=0)"
"0","sub_int = function(q) {"
"0","  n = peringkat[q]"
"0","  s_interval[1,1] = intervals[q,1]"
"0","  s_interval[1,2] = intervals[q,1] + sub_l[q]"
"0","  if (n > 1) {"
"0","    for (i in 2:n) {"
"0","      s_interval[i,1] = s_interval[i-1,2]"
"0","      s_interval[i,2] = s_interval[i,1] + sub_l[q]"
"0","    }"
"0","  }"
"0","  return(s_interval)"
"0","}"
"0",""
"0","urutan = order(peringkat1$peringkat) # Mengurutkan panjang interval dari yang terbesar"
"0",""
"0","# Fungsi untuk menyusun sub interval berdasarkan panjang interval"
"0","sub_int = function(q) {"
"0","  n = peringkat[q]"
"0","  s_interval[1,1] = intervals[q,1]"
"0","  s_interval[1,2] = intervals[q,1] + sub_l[q]"
"0","  if (n > 1) {"
"0","    for (i in 2:n) {"
"0","      s_interval[i,1] = s_interval[i-1,2]"
"0","      s_interval[i,2] = s_interval[i,1] + sub_l[q]"
"0","    }"
"0","  }"
"0","  return(s_interval)"
"0","}"
"0",""
"0","# Menyusun sub interval berdasarkan panjang interval sekaligus akan menjadi dasar fuzzifikasi yang baru"
"0","s = data.frame(min = 0, max = 0)"
"0","new = rbind(s)"
"0","i = 0"
"0","repeat {"
"0","  i = i + 1"
"0","  n = urutan[i]"
"0","  new = rbind(new, sub_int(n))"
"0","  if (i >= length(urutan)) {"
"0","    break()"
"0","  }"
"0","}"
"0","new = new[-1,]"
"0","new"
